permissions: {}

defaults:
  run:
    shell: bash

concurrency:
  group: CI
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare and Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit

  lint_and_scan:
    name: Ansible, Python Lint & Security Scanning
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Get Modified Files for Pull Request Event
        id: get-changed-files-pull
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin
          if [ -n "${{ github.event.pull_request.base.sha }}" ]; then
            CHANGED_FILES=$(git diff --diff-filter=AM --name-only "${{ github.event.pull_request.base.sha }}" "${{ github.sha }}")
            echo "Changed files: $CHANGED_FILES"
            CHANGED_FILES_STR=$(echo "$CHANGED_FILES" | tr '\n' ' ')
            echo "CHANGED_FILES_STR=$CHANGED_FILES_STR" >> $GITHUB_ENV
          else
            echo "No previous commit available. Skipping linting step."
          fi

      - name: Get Modified Files for Push Event
        id: get-changed-files
        run: |
          if [ -n "${{ github.event.before }}" ]; then
            CHANGED_FILES=$(git diff --diff-filter=AM --name-only ${{ github.event.before }} ${{ github.sha }})
            echo "Changed files: $CHANGED_FILES"
            CHANGED_FILES_STR=$(echo "$CHANGED_FILES" | tr '\n' ' ')
            echo "CHANGED_FILES_STR=$CHANGED_FILES_STR" >> $GITHUB_ENV
          else
            echo "No previous commit available. Skipping linting step."
          fi

      - name: Segregate YAML & PYTHON Files
        id: segregate-files
        run: |
          YAML_FILES=""
          PYTHON_FILES=""
          IFS=' ' read -ra CHANGED_FILES <<< "${CHANGED_FILES_STR}"
          for file in "${CHANGED_FILES[@]}"; do
            if [[ $file == *\.yml || $file == *\.yaml ]]; then
              YAML_FILES="$YAML_FILES $file"
            elif [[ $file == *\.py ]]; then
              PYTHON_FILES="$PYTHON_FILES $file"
            fi
          done
          echo "Segregated YAML Files: $YAML_FILES"
          echo "Segregated PYTHON files: $PYTHON_FILES"
          echo "yaml-files=$YAML_FILES" >> $GITHUB_OUTPUT
          echo "python-files=$PYTHON_FILES" >> $GITHUB_OUTPUT

      - name: Scan Ansible Playbooks
        run: |
          YAML_FILES="${{ steps.segregate-files.outputs.yaml-files }}"
          if [ -n "$YAML_FILES" ]; then
            ansible-lint $YAML_FILES
          else
            echo "No YAML/YML files found. Skipping Ansible Lint."
          fi

      - name: Scan Python Code using Pylint
        run: |
          PYTHON_FILES="${{ steps.segregate-files.outputs.python-files }}"
          if [ -n "$PYTHON_FILES" ]; then
            pylint $PYTHON_FILES
          else
            echo "No Python files found, skipping linting of Python code"
          fi

      - name: Scan Python Code using Bandit
        run: |
          PYTHON_FILES="${{ steps.segregate-files.outputs.python-files }}"
          if [ -n "$PYTHON_FILES" ]; then
            bandit -r $PYTHON_FILES
          else
            echo "No Python files found, skipping Bandit scan"
          fi

      - name: No Files Found
        run: |
          if [ -z "$YAML_FILES" ]; then
            echo "No YAML/YML files found in the commit."
          fi

  kics_scan:
    name: Run KICS Scan
    runs-on: ubuntu-latest
    if: |
      inputs.runKics == true ||
      github.event_name == 'push'
    needs: prepare
    timeout-minutes: 5
    permissions:
      contents: read
      issues: write
      pull-requests: write
      security-events: write
      actions: read
    steps:
      - name: Run KICS Scan
        uses: checkmarx/kics-github-action@v2
        with:
          path: ${{ env.KICS_SCAN_PATH }}
          fail_on: high
          output_formats: "json,sarif"
          exclude_paths: ".github/workflows/scorecard.yml"
          exclude_queries: "555ab8f9-2001-455e-a077-f2d0f41e2fb9"  # Unpinned Actions Full Length Commit SHA
        continue-on-error: true

      - name: Upload to Code-Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [kics_scan, lint_and_scan]
    if: github.event_name == 'push'
    timeout-minutes: 5
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          semantic_version: 24
          extra_plugins: |
            conventional-changelog-conventionalcommits@8.0.0
            @semantic-release/github@10.3.5
