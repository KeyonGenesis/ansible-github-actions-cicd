name: ci-main

on:
  push:
    branches:
      - main

jobs:
  # Linguist detects which languages exist in the repo.
  linguist-job:
    name: Linguist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run linguist
        id: linguist
        run: | 
          sudo gem install github-linguist
          echo "::set-output name=languages::$(github-linguist --json)"
      
      # Print languages found by linguist
      - name: Print linguist result
        run: echo "${{ steps.linguist.outputs.languages }}"
    
    # Once the variables are changed, its outputted for other jobs to use
    outputs:
      languages: ${{ steps.linguist.outputs.languages }} 

#===============================================  C/C++  ===============================================#

  # If C or C++ are detected by Linguist, CodeQL will run and scan the source code.
  codeql-cpp-job:
    name: CodeQL (C/C++)
    needs: linguist-job
    if: | 
      contains(needs.linguist-job.outputs.languages, '"C++"') || 
      contains(needs.linguist-job.outputs.languages, '"C"') 
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # The language is indicated here for CodeQL and is checked for security and QA issues
        languages: 'cpp'
        queries: +security-and-quality
        # Uncomment the below line to apply configuration file found in this repo to this github action
        # config-file: ./.github/codeql/codeql-config.yml

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # If the Autobuild fails above, remove it and uncomment the following three lines
    # and modify them (or add more) to build your code if your project
    # uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

#===============================================  CSHARP  ===============================================#
  
  # If CSharp is detected by Linguist, CodeQL will run and scan the source code.
  codeql-csharp-job:
    name: CodeQL (C#)
    needs: linguist-job
    if: contains(needs.linguist-job.outputs.languages, '"C#"')
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # The language is indicated here for CodeQL and is checked for security and QA issues
        languages: 'csharp'
        queries: +security-and-quality
        # Uncomment the below line to apply configuration file found in this repo to this github action
        # config-file: ./.github/codeql/codeql-config.yml

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # If the Autobuild fails above, remove it and uncomment the following three lines
    # and modify them (or add more) to build your code if your project
    # uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

#===============================================  GO  ===============================================#
  
  # If Go is detected by Linguist, CodeQL will run and scan the source code.
  codeql-go-job:
    name: CodeQL (Go)
    needs: linguist-job
    if: contains(needs.linguist-job.outputs.languages, '"Go"')
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # The language is indicated here for CodeQL and is checked for security and QA issues
        languages: 'go'
        queries: +security-and-quality
        # Uncomment the below line to apply configuration file found in this repo to this github action
        # config-file: ./.github/codeql/codeql-config.yml
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

#===============================================  JAVA  ===============================================#

  # If Java is detected by Linguist, CodeQL will run and scan the source code.
  codeql-java-job:
    name: CodeQL (Java)
    needs: linguist-job
    if: contains(needs.linguist-job.outputs.languages, '"Java"')
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps: 
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # The language is indicated here for CodeQL and is checked for security and QA issues
        languages: 'java'
        queries: +security-and-quality
        # Uncomment the below line to apply configuration file found in this repo to this github action
        # config-file: ./.github/codeql/codeql-config.yml

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # If the Autobuild fails above, remove it and uncomment the following three lines
    # and modify them (or add more) to build your code if your project
    # uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

#============================================  JAVASCRIPT/TYPESCRIPT  ============================================#
  
  # If Javascript or Typescript are detected by Linguist, CodeQL will run and scan the source code.
  codeql-js-job:
    name: CodeQL (JS)
    needs: linguist-job
    if: |
      contains(needs.linguist-job.outputs.languages, '"JavaScript"') ||
      contains(needs.linguist-job.outputs.languages, '"HTML"') ||
      contains(needs.linguist-job.outputs.languages, '"Vue"') ||
      contains(needs.linguist-job.outputs.languages, '"EJS"') ||
      contains(needs.linguist-job.outputs.languages, '"Handlebars"') ||
      contains(needs.linguist-job.outputs.languages, '"Nunjucks"') ||
      contains(needs.linguist-job.outputs.languages, '"JSON"') ||
      contains(needs.linguist-job.outputs.languages, '"YAML"') ||
      contains(needs.linguist-job.outputs.languages, '"RAML"') ||
      contains(needs.linguist-job.outputs.languages, '"XML"') ||
      contains(needs.linguist-job.outputs.languages, '"TypeScript"') ||
      contains(needs.linguist-job.outputs.languages, '"TSX"')
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # The language is indicated here for CodeQL and is checked for security and QA issues
        languages: 'javascript'
        queries: +security-and-quality
        # Uncomment the below line to apply configuration file found in this repo to this github action
        config-file: ./.github/codeql/codeql-config.yml
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
#===============================================  PYTHON  ===============================================#

  # If Python is detected by Linguist, CodeQL will run and scan the source code.
  codeql-python-job:
    name: CodeQL (Python)
    needs: linguist-job
    if: contains(needs.linguist-job.outputs.languages, '"Python"')
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # The language is indicated here for CodeQL and is checked for security and QA issues
        languages: 'python'
        queries: +security-and-quality
        # Uncomment the below line to apply configuration file found in this repo to this github action
        # config-file: ./.github/codeql/codeql-config.yml
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

#===============================================  RUBY  ===============================================#

  # If Ruby is detected by Linguist, CodeQL will run and scan the source code.
  codeql-ruby-job:
    name: CodeQL (Ruby)
    needs: linguist-job
    if: |
      contains(needs.linguist-job.outputs.languages, '"Ruby"') ||
      contains(needs.linguist-job.outputs.languages, '"HTML+ERB"')
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # The language is indicated here for CodeQL and is checked for security and QA issues
        languages: 'ruby'
        queries: +security-and-quality
        # Uncomment the below line to apply configuration file found in this repo to this github action
        # config-file: ./.github/codeql/codeql-config.yml
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

#=====================================================  PHP  =====================================================#

  # If PHP is detected by Linguist, Semgrep will run and scan the source code.
  semgrep-php-job:
    name: Semgrep (PHP)
    needs: linguist-job
    if: contains(needs.linguist-job.outputs.languages, '"PHP"')
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    permissions:
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Semgrep runs all PHP rules
      - name: Run Semgrep
        run: semgrep scan --sarif --output=semgrep.sarif
        env:
          SEMGREP_RULES: r/php

      # Semgrep generates a sarif file for GHAS to analyze. The sarif file is uploaded to GHAS by the code below
      - name: Upload sarif report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
     
#========================================  MOBILE(KOTLIN/OBJECTIVE-C/SWIFT)  ========================================#
  
  # If Java, Kotlin, Objective-C or Swift are detected by Linguist, Mobsf will run and scan the source code. 
  mobsf-job:
    name: Mobsf Scan (Android/iOS)
    needs: linguist-job
    if: |
      contains(needs.linguist-job.outputs.languages, '"Java"') ||
      contains(needs.linguist-job.outputs.languages, '"Kotlin"') ||
      contains(needs.linguist-job.outputs.languages, '"Objective-C"') ||
      contains(needs.linguist-job.outputs.languages, '"Swift"')
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Checkout the code
      uses: actions/checkout@v4
      
    - name: mobsfscan
      uses: MobSF/mobsfscan@main
      with:
        args: '. --sarif --output results.sarif || true'
    
    # Mobsf generates a sarif file for GHAS to analyze. The sarif file is uploaded to GHAS by the code below
    - name: Upload mobsfscan report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
  
#===========================================  ANSIBLE/DOCKER/TERRAFORM  ===========================================#
  
  # If Ansible, Docker, or Terraform are detected by Linguist, KICS will run and scan the source code.
  kics-job:
    name: KICS (Ansible/Docker/Terraform)
    needs: linguist-job
    if: |
      contains(needs.linguist-job.outputs.languages, '"Dockerfile"') ||
      contains(needs.linguist-job.outputs.languages, '"HCL"') ||
      contains(needs.linguist-job.outputs.languages, '"VCL"')
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Checkout the code
      uses: actions/checkout@v4
    
    - name: Run KICS
      uses: checkmarx/kics-github-action@v1.4
      with:
        path: './'
        ignore_on_exit: all
        output_formats: 'sarif'
    
    # Generates a sarif file for GHAS to analyze. The sarif file is uploaded to GHAS by the code below
    - name: Upload sarif report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif  
        
#===================================================  SHELL  ===================================================#
  
  # If Shell is detected by Linguist, Semgrep will run and scan the source code.
  semgrep-shell-job:
    name: Semgrep (Shell)
    needs: linguist-job
    if: contains(needs.linguist-job.outputs.languages, '"Shell"')
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    permissions:
      security-events: write

    steps:
    - name: Checkout the code
      uses: actions/checkout@v4
    
    # Semgrep runs all bash rules
    - name: Run Semgrep Scan
      run: semgrep --config=auto --sarif --output=semgrep.sarif
      env:
        SEMGREP_RULES: r/bash

    - name: Verify SARIF File
      run: |
        if [ -f semgrep.sarif ]; then
          echo "SARIF file generated successfully."
          ls -lah semgrep.sarif
        else
          echo "SARIF file missing!"
          exit 1
        fi

    # Semgrep generates a sarif file for GHAS to analyze. The sarif file is uploaded to GHAS by the code below
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif  # Ensure this matches the actual file path
        
#===================================================  NEXT PHASE  ===================================================#

  init:
    name: 🧐 Inintialize
    needs: linguist-job
    runs-on: ubuntu-24.04-arm
    outputs:
      skip_ci: ${{ steps.check_flag.outputs.skip_ci }}
      image_version: ${{ steps.check_tag.outputs.image_version }}
      tag_exists: ${{ steps.check_tag.outputs.tag_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for --no-ci flag in commit message
        id: check_flag
        run: |
          echo "Checking commit message for --no-ci flag..."
          if echo "${{ github.event.head_commit.message }}" | grep -- '--no-ci'; then
            echo "Skipping CI"
            echo "skip_ci=true" >> $GITHUB_OUTPUT
          else
            echo "skip_ci=false" >> $GITHUB_OUTPUT
          fi

      - name: Check release tag
        id: check_tag
        run: |
          VERSION=$(cat requirements.txt | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          echo "image_version=v${VERSION}" >> $GITHUB_OUTPUT
      
          export TAG_NAME="v${VERSION}"
          if ! [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "Tag $TAG_NAME does not meet the required format 'vX.Y.Z'."
            exit 1
          fi

          git fetch --unshallow --tags
          export TAG_EXISTS=$(git tag --list $TAG_NAME)
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag $TAG_NAME already exists."
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: 🏗️ Build
    needs: init
    if: ${{ needs.init.outputs.skip_ci == 'false' && needs.init.outputs.tag_exists == 'false' }}
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write  # Required to push to GHCR
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build/Publish as GitHub Package
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.init.outputs.image_version }}

      - name: Check tag and push in Github
        run: |
          # Set Git identity
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Check if the tag already exists
          TAG_EXISTS=$(git tag --list ${{ needs.init.outputs.image_version }})
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag ${{ needs.init.outputs.image_version }} already exists."
            exit 1
          fi

      - name: Test image
        run: |
          docker run -i ghcr.io/${{ github.repository }}:${{ needs.init.outputs.image_version }}

  release:
    name: 🚀 Release
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
    needs: [ init, build ]
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Tag Repo
        uses: richardsimko/update-tag@v1
        with:
          tag_name: ${{ needs.init.outputs.image_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          name: ${{steps.update-version.outputs.version}}
          tag_name: ${{steps.update-version.outputs.version}}
          target_commitish: ${{ steps.tag.outputs.sha }}

